### Starting build.
# Target: main.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules main.ml > main.ml.depends # cached
# Target: ai.mli.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:mli, file:ai.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules ai.mli > ai.mli.depends # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules state.mli > state.mli.depends # cached
# Target: command.mli.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:mli, file:command.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules command.mli > command.mli.depends # cached
# Target: command.cmi, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:mli, file:command.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o command.cmi command.mli # cached
# Target: state.cmi, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o state.cmi state.mli # cached
# Target: ai.cmi, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:mli, file:ai.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o ai.cmi ai.mli # cached
# Target: gameboard.mli.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:mli, file:gameboard.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules gameboard.mli > gameboard.mli.depends # cached
# Target: gameboard.cmi, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:mli, file:gameboard.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o gameboard.cmi gameboard.mli # cached
# Target: setup.mli.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:mli, file:setup.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules setup.mli > setup.mli.depends # cached
# Target: setup.cmi, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:mli, file:setup.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o setup.cmi setup.mli # cached
# Target: main.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o main.cmo main.ml # cached
# Target: ai.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:ai.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules ai.ml > ai.ml.depends # cached
<<<<<<< HEAD
=======
# Target: command.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules command.ml > command.ml.depends # cached
# Target: gameboard.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:gameboard.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules gameboard.ml > gameboard.ml.depends
# Target: setup.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:setup.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules setup.ml > setup.ml.depends
# Target: state.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules state.ml > state.ml.depends
>>>>>>> b60453b7c3d23925bba3ef5e4c8da89fe4d0e6de
# Target: ai.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:ai.cmo, file:ai.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o ai.cmo ai.ml # cached
# Target: command.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:command.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules command.ml > command.ml.depends # cached
# Target: command.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:command.cmo, file:command.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o command.cmo command.ml # cached
# Target: gameboard.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:gameboard.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules gameboard.ml > gameboard.ml.depends # cached
# Target: gameboard.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:gameboard.cmo, file:gameboard.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o gameboard.cmo gameboard.ml # cached
# Target: setup.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:setup.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules setup.ml > setup.ml.depends # cached
# Target: setup.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:setup.cmo, file:setup.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o setup.cmo setup.ml # cached
# Target: state.ml.depends, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package oUnit -package str -package ANSITerminal -package graphics -modules state.ml > state.ml.depends # cached
# Target: state.cmo, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package oUnit -package str -package ANSITerminal -package graphics -o state.cmo state.ml # cached
# Target: main.byte, tags: { package(ANSITerminal), package(graphics), package(oUnit), package(str), byte, dont_link_with, extension:byte, file:main.byte, link, ocaml, program, quiet, traverse }
ocamlfind ocamlc -linkpkg -package oUnit -package str -package ANSITerminal -package graphics command.cmo state.cmo ai.cmo gameboard.cmo setup.cmo main.cmo -o main.byte
# Compilation successful.
